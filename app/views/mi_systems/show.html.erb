<div class="row">   
  <div class="col-md-4">      
    <p>
      <ul class="list-group">
        <li class="list-group-item title">
          <%= icon('info-circle') %><strong>Info Sim</strong>
        </li>
        <li class="list-group-item">
          <strong>Nom:</strong> <%= @mi_system.name %>
        </li>
        <li class="list-group-item">
          <strong>Api url:</strong> <%= @mi_system.api_url %>
        </li>
        <li class="list-group-item">
          <strong>Api key:</strong> <%= @mi_system.api_key %>
        </li>
        <li class="list-group-item">
          <strong>Période:</strong> du <%= l @mi_system.start_date %> au <%= l @mi_system.end_date %>
        </li>
      </ul>
    </p>
    <p>
      <ul class="list-group">
        <li class="list-group-item title">
          <%= icon('check') %><strong>Mode(s) atourisé(s)</strong>
        </li>
        <li class="list-group-item">
          <% @mi_system.modes.each do |mode| %>
            <span class="mode"><%= mode.mode_code %></span>
          <% end %>
        </li>
      </ul>
    </p>
    <p>
      <ul class="list-group">
        <li class="list-group-item title">
          <%= icon('list') %><strong>Capacités</strong>
        </li>
        <li class="list-group-item">
          <%= @mi_system.comment %>
        </li>
      </ul>
    </p>
  </div>
  <div class="col-md-8">
    <!-- html map container -->
    <%= map_layers_container(@map, :class => 'small_size', :include_loading => true) %>     
    <!-- map_layers js scripts and if necessary its dependencies -->
    <%= map_layers_includes(@map, :onload => true) do %>
    // Js code here, to be added after the map itself
    // you may add openlayers js code (%{map} and %{map_handler} are replaced the corresponding js objects)

    // setDragCallback handle feature drag events
    %{map_handler}.setDragCallback('onComplete', function(feature) {
      // and allows you to fill a form on feature drag
      fillFormWithFeature('<%= @map.variable %>', feature);
    });

    // handle map move and add features in the center and each corners on map move
    %{map}.events.register("moveend", map, function() {
      var center = %{map}.getCenter().clone().transform( %{map}.getProjectionObject(),new OpenLayers.Projection("EPSG:4326") );
      alert("moveend : " + center);
      feature = %{map_handler}.addFeature('stops', center.lat, center.lon);

      // use any custom js method at your convenience
      fillFormWithLonlat(feature);

      // add features to each map corners
      bounds = map.getExtent().toGeometry().getBounds().transform( map.getProjectionObject(),new OpenLayers.Projection("EPSG:4326") );
      %{map_handler}.addFeature('stops', bounds.top, bounds.left);
      %{map_handler}.addFeature('stops', bounds.top, bounds.right);
      %{map_handler}.addFeature('stops', bounds.bottom, bounds.left);
      %{map_handler}.addFeature('stops', bounds.bottom, bounds.right);
    });
    <% end %>
  </div>

  <!-- Toggle layout visibility -->
  <%= link_to 'Toggle layer', '#', :onclick => "#{@map.map_handler.toggle_layer('stops')}; return false;" %>

  <!-- Toggle Popup Infowindow -->
  <%= link_to 'Toggle popup', '#', :onclick => "#{@map.map_handler.toggle_feature_popup(@map.map_handler.get_layer_feature_by_nb('stops', 0))}; return false;" %>

  <!-- Center on the first feature -->
  <%= link_to 'Center', '#', :onclick => "#{@map.map_handler.set_center_on_feature_by_nb("stops", 0, 15)}; return false;" %>

  <!-- Center on the last feature without zooming -->
  <%= link_to 'Center without zoom', '#', :onclick => "#{@map.map_handler.set_center_on_feature_by_nb("stops", -1)}; return false;" %>

  <!-- Set control mode for layouts events -->
  <%= link_to 'Set control to Drag', '#', :onclick => "#{@map.map_handler.toggle_control('map_controls', 'drag')}; return false;" %>
  <%= link_to 'Set control to Select', '#', :onclick => "#{@map.map_handler.toggle_control('map_controls', 'select')}; return false;" %>
</div>
