require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe StopSearchesController do

  # This should return the minimal set of attributes required to create a valid
  # StopSearch. As you add validations to StopSearch, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { "stop_name" => "MyString" } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # StopSearchesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  #describe "GET index" do
    #it "assigns all stop_searches as @stop_searches" do
      #stop_search = StopSearch.new valid_attributes
      #get :index, {}, valid_session
      #expect(assigns(:stop_searches)).to eq([stop_search])
    #end
  #end

  #describe "GET show" do
    #it "assigns the requested stop_search as @stop_search" do
      #stop_search = create(:stop_search) #StopSearch.create! valid_attributes
      #get :show, {:id => stop_search.to_param}, valid_session
      #expect(assigns(:stop_search)).to eq(stop_search)
    #end
  #end

  #describe "GET new" do
    #it "assigns a new stop_search as @stop_search" do
      #get :new, {}, valid_session
      #expect(assigns(:stop_search)).to be_a_new(StopSearch)
    #end
  #end

  #describe "GET edit" do
    #it "assigns the requested stop_search as @stop_search" do
      #stop_search = StopSearch.create! valid_attributes
      #get :edit, {:id => stop_search.to_param}, valid_session
      #expect(assigns(:stop_search)).to eq(stop_search)
    #end
  #end

  #describe "POST create" do
    #describe "with valid params" do
      #it "creates a new StopSearch" do
        #expect {
          #post :create, {:stop_search => valid_attributes}, valid_session
        #}.to change(StopSearch, :count).by(1)
      #end

      #it "assigns a newly created stop_search as @stop_search" do
        #post :create, {:stop_search => valid_attributes}, valid_session
        #expect(assigns(:stop_search)).to be_a(StopSearch)
        #expect(assigns(:stop_search)).to be_persisted
      #end

      #it "redirects to the created stop_search" do
        #post :create, {:stop_search => valid_attributes}, valid_session
        #expect(response).to redirect_to(StopSearch.last)
      #end
    #end

    #describe "with invalid params" do
      #it "assigns a newly created but unsaved stop_search as @stop_search" do
        # Trigger the behavior that occurs when invalid params are submitted
        #allow_any_instance_of(StopSearch).to receive(:save).and_return(false)
        #post :create, {:stop_search => { "stop_name" => "invalid value" }}, valid_session
        #expect(assigns(:stop_search)).to be_a_new(StopSearch)
      #end

      #it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        #allow_any_instance_of(StopSearch).to receive(:save).and_return(false)
        #post :create, {:stop_search => { "stop_name" => "invalid value" }}, valid_session
        #expect(response).to render_template("new")
      #end
    #end
  #end

  #describe "PUT update" do
    #describe "with valid params" do
      #it "updates the requested stop_search" do
        #stop_search = StopSearch.create! valid_attributes
        # Assuming there are no other stop_searches in the database, this
        # specifies that the StopSearch created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        #expect_any_instance_of(StopSearch).to receive(:update).with({ "stop_name" => "MyString" })
        #put :update, {:id => stop_search.to_param, :stop_search => { "stop_name" => "MyString" }}, valid_session
      #end

      #it "assigns the requested stop_search as @stop_search" do
        #stop_search = StopSearch.create! valid_attributes
        #put :update, {:id => stop_search.to_param, :stop_search => valid_attributes}, valid_session
        #expect(assigns(:stop_search)).to eq(stop_search)
      #end

      #it "redirects to the stop_search" do
        #stop_search = StopSearch.create! valid_attributes
        #put :update, {:id => stop_search.to_param, :stop_search => valid_attributes}, valid_session
        #expect(response).to redirect_to(stop_search)
      #end
    #end

    #describe "with invalid params" do
      #it "assigns the stop_search as @stop_search" do
        #stop_search = StopSearch.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        #allow_any_instance_of(StopSearch).to receive(:save).and_return(false)
        #put :update, {:id => stop_search.to_param, :stop_search => { "stop_name" => "invalid value" }}, valid_session
        #expect(assigns(:stop_search)).to eq(stop_search)
      #end

      #it "re-renders the 'edit' template" do
        #stop_search = StopSearch.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        #allow_any_instance_of(StopSearch).to receive(:save).and_return(false)
        #put :update, {:id => stop_search.to_param, :stop_search => { "stop_name" => "invalid value" }}, valid_session
        #expect(response).to render_template("edit")
      #end
    #end
  #end

  #describe "DELETE destroy" do
    #it "destroys the requested stop_search" do
      #stop_search = StopSearch.create! valid_attributes
      #expect {
        #delete :destroy, {:id => stop_search.to_param}, valid_session
      #}.to change(StopSearch, :count).by(-1)
    #end

    #it "redirects to the stop_searches list" do
      #stop_search = StopSearch.create! valid_attributes
      #delete :destroy, {:id => stop_search.to_param}, valid_session
      #expect(response).to redirect_to(stop_searches_url)
    #end
  #end

end
