require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ConnectionsController do

  # This should return the minimal set of attributes required to create a valid
  # Connection. As you add validations to Connection, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { "stop_1_id" => "1234", "stop_2_id" => "1324" } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ConnectionsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all connections as @connections" do
      connection = create(:connection) #Connection.create! valid_attributes
      #puts connection.inspect
      # => puts "TEXT #{Stop.find(connection.stop_1_id)  }"
      get :index, {:stop_id => connection.stop_1_id}, valid_session
      expect(assigns(:connections)).to eq([connection])
    end
  end

  describe "GET show" do
    it "assigns the requested connection as @connection" do
      connection = create(:connection)
      #puts "connection.to_param = #{connection.to_param}"
      get :show, {:stop_id => connection.stop_1_id, :id => connection.id}, valid_session
      expect(assigns(:connection)).to eq(connection)
    end
  end

  describe "GET new" do
    it "assigns a new connection as @connection" do
      stop = create(:stop)
      get :new, {:stop_id => stop.to_param}, valid_session
      expect(assigns(:connection)).to be_a_new(Connection)
    end
  end

  describe "GET edit" do
    it "assigns the requested connection as @connection" do
      connection = create(:connection) #Connection.create! valid_attributes
      get :edit, {:stop_id => connection.stop_1_id, :id => connection.to_param}, valid_session
      expect(assigns(:connection)).to eq(connection)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Connection" do
        stop1 = create(:stop)
        stop2 = create(:stop)
        connection = build(:connection, :stop_1_id => stop1.id, :stop_2_id => stop2.id) 
        expect {
          post :create, {:stop_id => stop1.id, :connection => connection.attributes}, valid_session
        }.to change(Connection, :count).by(1)
      end

      it "assigns a newly created connection as @connection" do
        stop1 = create(:stop)
        stop2 = create(:stop)
        connection = build(:connection, :stop_1_id => stop1.id, :stop_2_id => stop2.id) 
        post :create, {:stop_id => stop1.id, :connection => connection.attributes}, valid_session
        expect(assigns(:connection)).to be_a(Connection)
        expect(assigns(:connection)).to be_persisted
      end

      it "redirects to the created connection" do
        stop1 = create(:stop)
        stop2 = create(:stop)
        connection = build(:connection, :stop_1_id => stop1.id, :stop_2_id => stop2.id) 
        post :create, {:stop_id => stop1.id, :connection => connection.attributes}, valid_session
        connection2 = Connection.last
        expect(response).to redirect_to([connection2.stop_1, connection2])
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved connection as @connection" do
        stop1 = create(:stop)
        stop2 = create(:stop)
        connection = build(:connection, :stop_1_id => stop1.id, :stop_2_id => stop2.id) 
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(Connection).to receive(:save).and_return(false)
        post :create, {:stop_id => stop1.id, :connection => connection.attributes}, valid_session
        expect(assigns(:connection)).to be_a_new(Connection)
      end

      #it "re-renders the 'new' template" do
        #stop1 = create(:stop)
        ##stop2 = create(:stop)
        #connection = build(:connection, :stop_1_id => stop1.id, :stop_2_id => stop1.id) 
        ## Trigger the behavior that occurs when invalid params are submitted
        #allow_any_instance_of(Connection).to receive(:save).and_return(false)
        #post :create, {:stop_id => stop1.id, :connection => connection.attributes}, valid_session
        #expect(response).to render_template("new")
      #end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      #it "updates the requested connection" do
        #stop2 = create(:stop)
        #connection = create(:connection)
        # Assuming there are no other connections in the database, this
        # specifies that the Connection created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        #puts "stop2.connections = #{stop2.connections}"
        #expect(stop2.connections.first).to receive(:update).with({ "stop_2_id" => "1234" })
        #expect_any_instance_of(stop2.connections).to receive(:update).with({ "stop_2_id" => "1234" })
        #put :update, {:stop_id => connection.stop_1_id, :id => connection.to_param, :connection => { "stop_2_id" => stop2.id}}, valid_session
      #end

      it "assigns the requested connection as @connection" do
        connection = create(:connection)
        put :update, {:stop_id => connection.stop_1_id, :id => connection.to_param}, valid_session
        expect(assigns(:connection)).to eq(connection)
      end

      it "redirects to the connection" do
        connection = create(:connection)
        put :update, {:stop_id => connection.stop_1_id, :id => connection.to_param}, valid_session
        expect(response).to redirect_to([connection.stop_1, connection])
      end
    end

    describe "with invalid params" do
      it "assigns the connection as @connection" do
        connection = create(:connection)
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(Connection).to receive(:save).  and_return(false)
        put :update, {:stop_id => connection.stop_1_id, :id => connection.to_param, :connection => { "stop_1_id" => "invalid value" }}, valid_session
        expect(assigns(:connection)).to eq(connection)
      end

      #it "re-renders the 'edit' template" do
        #connection = create(:connection)
        # Trigger the behavior that occurs when invalid params are submitted
        #allow_any_instance_of(Connection).to receive(:save).and_return(false)
        #put :update, {:stop_id => connection.stop_1_id, :id => connection.to_param, :connection => { "stop_1_id" => "invalid value" }}, valid_session
        #expect(response).to render_template("edit")
      #end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested connection" do
      connection = create(:connection)
      expect {
        delete :destroy, {:stop_id => connection.stop_1.id, :id => connection.to_param}, valid_session
      }.to change(Connection, :count).by(-1)
    end

    it "redirects to the connections list" do
      connection = create(:connection)
      stop_1 = connection.stop_1
      delete :destroy, {:stop_id => connection.stop_1.id, :id => connection.to_param}, valid_session
      expect(response).to redirect_to([stop_1, "connections"])
    end
  end

end
